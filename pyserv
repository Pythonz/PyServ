#!/bin/sh
case $1 in
	start)
		if [ ! -f pyserv.pid ]; then
			if [ -f pyserv.pyc ]; then
				rm -f pyserv.pyc
			fi
			python pyserv.py >> /dev/null &
			pid=$!
			echo $pid > pyserv.pid
			echo "PyServ started into background (PID: $pid)"
		else
			pid=$(cat pyserv.pid)
			status="false"
			for data in $(ps | grep $pid); do
				status="true"
			done
			if [ $status = "false" ]; then
				rm -f pyserv.pid
				sh pyserv start
			else
				echo "PyServ is already running"
			fi
		fi
		;;
	stop)
		if [ -f pyserv.pid ]; then
			pid=$(cat pyserv.pid)
			kill -9 $pid
			rm -f pyserv.pid
			if [ -f pyserv.pyc ]; then
				rm -f pyserv.pyc
			fi
			echo "PyServ is stopped (PID: $pid)"
		else
			echo "PyServ is not running"
		fi
		;;
	restart)
		if [ -f pyserv.pid ]; then
			sh pyserv stop
			sh pyserv start
		else
			sh pyserv start
		fi
		;;
	debug)
		while [ 1 ]; do
			if [ -f pyserv.pyc ]; then
				rm -f pyserv.pyc
			fi
			python pyserv.py
			if [ -f pyserv.pyc ]; then
				rm -f pyserv.pyc
			fi
		done
		;;
        update)
		available=$(curl https://raw.github.com/Pythonz/PyServ/master/version)
		version=$(cat version)
		if [ $available != $version ]; then
			running="false"
			if [ -f pyserv.pid ]; then
				sh pyserv stop
				running="true"
			fi
			git add pyserv.conf
			git commit -m 'Save'
			git pull
			if [ $running = "true" ]; then
				sh pyserv start
			fi
			echo "Done."
		else
			echo "No update available."
		fi
		;;
	status)
		if [ -f pyserv.pid ]; then
			pid=$(cat pyserv.pid)
			status="PyServ seems to be crashed"
			for data in $(ps | grep $pid); do
				status="PyServ is running"
			done
		else
			status="PyServ is not running"
		fi
		echo $status
		;;
	*)
		echo "start | stop | restart | debug | update | status"
		;;
esac
	
